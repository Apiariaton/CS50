#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "check_arguments.h"
#include "jpeg_file_structs_and_operations.h"
#include <stdio.h>

//How am I going to debug this file, so that it works and produces my desired output?
//0 can I write another separate program in the same VScode editor which takes a raw file as input and outputs a JPEG? Just one JPEG...
//Firstly can I write a program which outputs the first file in the card.raw sequence, consulting the CS50 P4 brief?
//Secondly have I used a process of exclusion and staged testing where I test line by line, using breakpoints until I reach the problematic line
//Thirdly is there a way to check what has been written to a file?
//Fourthly what are the rules which govern file pointers? Can they only be opened once? Can fwrite be called on the same file pointer multiple times or not?
//Fifth is there way to understand what is meant by core dumped?
//Sixth is there a way to understand what is meant by segmentation error?
//Seventh can I use valgrind to help me identify memory problems in the code?

//How could I reframe this problem, so that it works properly?
//Mega_buffer - this stores all the bytes from which I am going to write my JPEG files

//Mega buffer has 50 sub-items all of which will be written to as JPEG files





int main(int argc, char *argv[])
{

    if(check_whether_arguments_correct(&argc,argv) == 1)
    {
        return 1;
    }

report_file_size_in_terms_of_byte_blocks(argv);

image_file *original_image_file = malloc(sizeof(image_file));
image_file *copy_of_head_of_linked_file_list = original_image_file;


uint8_t copy_of_final_four_value_set[16];
uint8_t hex_value = 0xe0;

        for (int i = 0; i < 16; i++)
        {

            copy_of_final_four_value_set[i] = hex_value;
            hex_value++;

        }


//Try debugging for segmentation fault...
J4 *FIRST_FOUR_BYTES = malloc(sizeof(J4));

    FIRST_FOUR_BYTES->three_values[0] = 0xff;
    FIRST_FOUR_BYTES->three_values[1] = 0xd8;
    FIRST_FOUR_BYTES->three_values[2] = 0xd8;

    //memcpy(FIRST_FOUR_BYTES->fourth_set_of_values,copy_of_final_four_value_set,2); //Problem here with the allocation of values to fourth_set_of_values - would like to find more stream-lined solution

    for (int i = 0; i < 16; i++)
    {
    FIRST_FOUR_BYTES->fourth_set_of_values[i] = copy_of_final_four_value_set[i];
    }

uint8_t four_bytes_of_this_512_byte_block[4];


IJS *unit_characteristic_storage = malloc(sizeof(IJS));

/*
typedef struct individual_JPEG_segment
{
int current_position_in_list_of_fifty_files;
char *current_JPEG_file_name;

long int unit_start_address_as_offset;

long int unit_end_address_as_offset;
} IJS;
*/

printf("%s\n",argv[1]);
FILE * ONE_FILE_BOUND_MARKER = fopen(argv[1],"rb");


/*
fseek(ONE_FILE_BOUND_MARKER, 0, SEEK_END);
fseek(ONE_FILE_BOUND_MARKER,0,SEEK_SET);
fseek(ONE_FILE_BOUND_MARKER,1,SEEK_CUR); //Relativised part of file - End of file is 506368 relative bytes
fseek(ONE_FILE_BOUND_MARKER,1L,SEEK_CUR); //Why does fseek get stuck at 4096 bytes?
fseek(ONE_FILE_BOUND_MARKER,1,SEEK_CUR);
fseek(ONE_FILE_BOUND_MARKER,1,SEEK_CUR);
fseek(ONE_FILE_BOUND_MARKER,1,SEEK_CUR);
fseek(ONE_FILE_BOUND_MARKER,1,SEEK_CUR);
*/

//Different approach as it appears that I am being constrained by the current file being limited by the I/O buffer mode which is in use and I need to use fread in order to write to
//buffer. First of all, I will be taking the following data type a uint8_t. fread(uint8_t buffer, 1, 512, ONE_FILE_BOUND_MARKER) if != realloc(buffer,sizeof(buffer) + 512);
//if == fwrite(buffer,sizeof(buffer),1,copy...->file_start_location)//fclose(copy...file_start_location)

//Replace JPEG_image_storage with a FILE pointer

//uint8_t *JPEG_image_storage_unit = malloc(sizeof(uint8_t) * 512);

FILE * JPEG_image_storage_unit = fopen("JPEG_image_storage_unit.jpeg","wb+");
int new_writing_position = 0;
uint8_t return_position = 0;
int current_position_in_JPEG_file_sequence = 0;
uint8_t file_four_bytes[4];

//File status checker

fread(JPEG_image_storage_unit,1,512,ONE_FILE_BOUND_MARKER);
int i = 1;
while (i == 1)
{
int buffer[3] = {(uint8_t)1,(uint8_t)2,(uint8_t)3};
fwrite(buffer,1,3,JPEG_image_storage_unit);
capture_file_four_bytes(ONE_FILE_BOUND_MARKER,file_four_bytes);



if (JPEG_beginning(FIRST_FOUR_BYTES,file_four_bytes) == 0)
{
sprintf(copy_of_head_of_linked_file_list->file_name,"IMG_NO_%i.jpeg",current_position_in_JPEG_file_sequence);

copy_of_head_of_linked_file_list->file_start_location = fopen(copy_of_head_of_linked_file_list->file_name,"wb");

//Can this be replaced with fread()?
//Alternate phrasing:
fclose(JPEG_image_storage_unit);
JPEG_image_storage_unit = fopen("JPEG_image_storage_unit.jpeg","rb");

fread(copy_of_head_of_linked_file_list->file_start_location,1, sizeof(JPEG_image_storage_unit),JPEG_image_storage_unit);

fclose(copy_of_head_of_linked_file_list->file_start_location);

fclose(JPEG_image_storage_unit);

JPEG_image_storage_unit = fopen("JPEG_image_storage_unit.jpeg","wb+");



copy_of_head_of_linked_file_list->next = malloc(sizeof(image_file));

copy_of_head_of_linked_file_list = copy_of_head_of_linked_file_list->next;

current_position_in_JPEG_file_sequence++;

//return_position = ftell(ONE_FILE_BOUND_MARKER);

if (fseek(ONE_FILE_BOUND_MARKER,508,SEEK_CUR) != 0)
{
fseek(ONE_FILE_BOUND_MARKER, -508, SEEK_CUR);

fwrite(file_four_bytes,1,4,JPEG_image_storage_unit);

fwrite(ONE_FILE_BOUND_MARKER,1,507,JPEG_image_storage_unit);

fclose(JPEG_image_storage_unit);

sprintf(copy_of_head_of_linked_file_list->file_name,"IMG_NO_%i.jpeg",current_position_in_JPEG_file_sequence);

copy_of_head_of_linked_file_list->file_start_location = fopen(copy_of_head_of_linked_file_list->file_name,"wb");

JPEG_image_storage_unit = fopen("JPEG_image_storage_unit","rb");

fread(copy_of_head_of_linked_file_list->file_start_location,512,1,JPEG_image_storage_unit);

fclose(copy_of_head_of_linked_file_list->file_start_location);

fclose(JPEG_image_storage_unit);


//Capture last file

return 0;
}


fwrite(file_four_bytes,1,4,JPEG_image_storage_unit);
fwrite(ONE_FILE_BOUND_MARKER,1,508,JPEG_image_storage_unit); //If the current segment is not the final segment and magic number sequence spotted, then copy this
//to start of buffer to add to new JPEG sequence

}

else
{
//return_position = ftell(ONE_FILE_BOUND_MARKER);
if (fseek(ONE_FILE_BOUND_MARKER,508,SEEK_CUR) != 0)
{
//Capture part of last file which is current file
fseek(ONE_FILE_BOUND_MARKER,-508,SEEK_CUR);

fwrite(file_four_bytes,1,4,JPEG_image_storage_unit);

fwrite(ONE_FILE_BOUND_MARKER,1,508,JPEG_image_storage_unit); //Is it right to write with 508 rather than 507?

copy_of_head_of_linked_file_list->file_start_location = fopen(copy_of_head_of_linked_file_list->file_name,"wb");

fwrite(JPEG_image_storage_unit,sizeof(JPEG_image_storage_unit),1,copy_of_head_of_linked_file_list->file_start_location);

fclose(copy_of_head_of_linked_file_list->file_start_location);

fclose(JPEG_image_storage_unit);

return 0;
}




//fread(JPEG_image_storage_unit,1,4,(FILE *)file_four_bytes);
//fwrite((void *) (file_four_bytes),1,4,JPEG_image_storage_unit); //This is the location of the error what is happening here?

fwrite(ONE_FILE_BOUND_MARKER,1,508,JPEG_image_storage_unit); //Return to this later


}











}
}
